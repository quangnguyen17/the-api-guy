{"version":3,"sources":["Components.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","className","Nav","Link","APIListItem","text","API","lower","str","replace","c","toLowerCase","style","minWidth","width","maxWidth","Category","listStylePosition","Auth","length","JSON","stringify","HTTPS","Cors","Description","Button","variant","href","target","rel","App","useState","categories","setCategories","APIs","setAPIs","filteredAPIs","setFilteredAPIs","searchText","setSearchText","selectedCategory","setSelectedCategory","useEffect","axios","get","then","res","data","catch","err","console","log","entries","filter","searchedRes","containsSearchText","includes","containsCategory","filtered","Container","fluid","Row","Col","md","type","onChange","event","value","placeholder","onClick","size","map","idx","key","category","innerText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e8fc4170.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\n\nexport const NavBar = () => (\n  <Navbar>\n    <h1 className=\"display-4\">The API Guy.</h1>\n    <Nav className=\"ml-auto justify-content-end\">\n      <Nav.Link>What is an API?</Nav.Link>\n      <Nav.Link>How to use it?</Nav.Link>\n    </Nav>\n  </Navbar>\n);\n\nexport const APIListItem = ({ API }) => {\n  const lower = str => str.replace(/^\\w/, c => c.toLowerCase());\n\n  const TrueFalse = text => (\n    <pre\n      className={`d-inline-block align-middle text-${\n        text === \"true\" ? \"success\" : \"danger\"\n      }`}\n    >\n      &#60;{text === \"true\" ? \"supported\" : \"not-supported\"}&#62;\n    </pre>\n  );\n  const Cors = text => (\n    <pre\n      className={`d-inline-block align-middle text-${\n        text === \"no\" ? \"danger\" : text === \"unknown\" ? \"warning\" : \"success\"\n      }`}\n    >\n      &#60;{lower(text)}&#62;\n    </pre>\n  );\n\n  return (\n    <li\n      style={{ minWidth: 275, width: \"auto\", maxWidth: 375 }}\n      className=\"list-inline-item align-top mr-5 mb-5\"\n    >\n      <h1>{API.API}</h1>\n      <p className=\"text-secondary\">\n        #{API.Category.replace(/ /g, \"\").toLowerCase()}\n      </p>\n      <ul style={{ listStylePosition: \"inside\" }} className=\"mt-3\">\n        <li>\n          <span className=\"align-middle mr-2\">Auth:</span>\n          <pre className=\"d-inline-block align-middle text-info\">\n            &#60;{API.Auth.length < 1 ? \"none\" : lower(API.Auth)}&#62;\n          </pre>\n        </li>\n        <li>\n          <span className=\"align-middle mr-2\">HTTPS:</span>\n          {TrueFalse(JSON.stringify(API.HTTPS))}\n        </li>\n        <li>\n          <span className=\"align-middle mr-2\">Cors:</span>\n          {Cors(API.Cors)}\n        </li>\n      </ul>\n      <p className=\"my-2\">{API.Description}</p>\n      <Button\n        variant=\"link\"\n        href={API.Link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"text-secondary\"\n      >\n        Read Docs\n      </Button>\n    </li>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { NavBar, APIListItem } from \"./Components\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [categories, setCategories] = useState([]);\n  const [APIs, setAPIs] = useState([]);\n  const [filteredAPIs, setFilteredAPIs] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\"https://api.publicapis.org/categories\")\n      .then(res => setCategories(res.data))\n      .catch(err => console.log(err));\n    axios\n      .get(\"https://api.publicapis.org/entries\")\n      .then(res => setAPIs(res.data.entries))\n      .catch(err => console.log(err));\n  }, []);\n\n  useEffect(() => {\n    if (selectedCategory.length > 0) {\n      setFilteredAPIs(\n        APIs.filter(\n          API => API.Category.toLowerCase() === selectedCategory.toLowerCase()\n        )\n      );\n    }\n  }, [APIs, selectedCategory]);\n\n  useEffect(() => {\n    if (searchText.length > 0) {\n      let searchedRes = [];\n      if (selectedCategory.length > 0) {\n        searchedRes = APIs.filter(API => {\n          const containsSearchText = API.API.toLowerCase().includes(\n            searchText.toLowerCase()\n          );\n          const containsCategory =\n            API.Category.toLowerCase() === selectedCategory.toLowerCase();\n          return containsSearchText && containsCategory;\n        });\n      } else {\n        searchedRes = APIs.filter(API =>\n          API.API.toLowerCase().includes(searchText.toLowerCase())\n        );\n      }\n\n      setFilteredAPIs(searchedRes);\n    } else {\n      if (selectedCategory.length > 0) {\n        const filtered = APIs.filter(\n          API => API.Category.toLowerCase() === selectedCategory.toLowerCase()\n        );\n        setFilteredAPIs(filtered);\n      }\n    }\n  }, [searchText, APIs, selectedCategory]);\n\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"p-5\">\n        <NavBar />\n        <Row className=\"mt-5\">\n          <Col md={9} className=\"pr-5\">\n            <input\n              type=\"text\"\n              onChange={event => setSearchText(event.target.value)}\n              placeholder=\"ยบ Search for APIs\"\n              className=\"w-100 h3 mb-5 border-0 font-weight-normal\"\n            />\n            {selectedCategory.length > 0 && (\n              <Button\n                onClick={() => setSelectedCategory(\"\")}\n                size=\"sm\"\n                variant=\"info\"\n                className=\"py-1 px-2 align-middle mr-3 mb-4\"\n              >\n                Show All\n              </Button>\n            )}\n            <h6 className=\"d-inline-block align-middle mb-4\">\n              Showing{\" \"}\n              {selectedCategory.length > 0 || searchText.length > 0\n                ? filteredAPIs.length\n                : APIs.length}{\" \"}\n              APIs{\" \"}\n              {selectedCategory.length > 0 ? `for ${selectedCategory}` : \"\"}\n            </h6>\n            <ul className=\"list-inline\">\n              {selectedCategory.length > 0 || searchText.length > 0\n                ? filteredAPIs.map((API, idx) => (\n                    <APIListItem key={idx} API={API} />\n                  ))\n                : APIs.map((API, idx) => <APIListItem key={idx} API={API} />)}\n            </ul>\n          </Col>\n          <Col md={3}>\n            <h5>{categories.length} Categories</h5>\n            <ul className=\"list-inline mt-4\">\n              {categories.map((category, idx) => (\n                <Button\n                  onClick={event => setSelectedCategory(event.target.innerText)}\n                  key={idx}\n                  className=\"list-inline-item m-1 py-1 px-2 rounded\"\n                  variant={selectedCategory === category ? \"dark\" : \"light\"}\n                >\n                  {category}\n                </Button>\n              ))}\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}