{"version":3,"sources":["StyleSheet.js","components/Main.js","components/Components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledLoadingView","height","display","justifyContent","alignItems","StyledSearchBar","borderStyle","backgroundColor","textAlign","width","boxShadow","Main","useState","APIs","setAPIs","filteredAPIs","setFilterAPIs","searchText","setSearchText","isLoading","setIsLoading","selectedCategory","setSelectedCategory","categories","setCategories","searchInputRef","useRef","useEffect","axios","get","then","res","data","fetchedCategories","i","length","catch","err","hasOwnProperty","param","toLowerCase","replace","fetchedAPIs","entries","current","value","filter","API","comparedSearchText","descriptionContains","Description","includes","nameContains","categoryOnSelect","event","preventDefault","selected","target","innerText","isSearching","upper","str","c","toUpperCase","APIPreview","index","key","className","style","color","Category","borderRadius","Auth","text","JSON","stringify","HTTPS","Cors","href","Link","rel","Row","role","aria-label","animationDelay","overflow","ButtonToolbar","Object","map","obj","idx","Button","onClick","ref","onChange","placeholder","Spinner","animation","variant","NavBar","props","Navbar","expand","Toggle","aria-controls","Collapse","id","Nav","to","ComingSoon","page","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"kGAiBAA,EAAOC,QAAU,CAAEC,kBAhBO,CACtBC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAYsBC,gBATd,CACpBC,YAAa,OACbC,gBAAiB,QACjBC,UAAW,SACXN,QAAS,eACTO,MAAO,SACPC,UAAW,4C,2PCgKAC,EAzKF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACRC,EADQ,KACFC,EADE,OAEuBF,mBAAS,IAFhC,mBAERG,EAFQ,KAEMC,EAFN,OAGqBJ,mBAAS,IAH9B,mBAGRK,EAHQ,KAGIC,EAHJ,OAImBN,oBAAS,GAJ5B,mBAIRO,EAJQ,KAIGC,EAJH,OAKiCR,mBAAS,WAL1C,mBAKRS,EALQ,KAKUC,EALV,OAMqBV,mBAAS,IAN9B,mBAMRW,EANQ,KAMIC,EANJ,KAOTC,EAAiBC,mBAEvBC,qBAAU,WACNC,IAAMC,IAAI,yCACLC,MAAK,SAAAC,GAIF,IAHA,IAAMC,EAAOD,EAAIC,KACbC,EAAoB,GAEfC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAElCD,EADiBD,EAAKE,IACQ,EAGlCV,EAAcS,GACdX,EAAoB,cAEvBc,OAAM,SAAAC,SACZ,IAEHV,qBAAU,WACN,GAAIJ,EAAWe,eAAejB,GAAmB,CAE7C,GADWE,EAAWF,GACbc,OAAS,EACdrB,EAAQS,EAAWF,QAChB,CACH,IAAMkB,EAAQlB,EAAiBmB,cAAcC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,OAC5Eb,IAAMC,IAAN,sDAAyDU,IACpDT,MAAK,SAAAC,GACF,IAAMW,EAAcX,EAAIC,KAAKW,QAC7B7B,EAAQ4B,GACRlB,EAAc,eAAKD,EAAN,eAAmBF,EAAmBqB,QAEtDN,OAAM,SAAAC,OAGfnB,EAAc,IACdO,EAAemB,QAAQC,MAAQ,MAEpC,CAACxB,EAAkBE,IAEtBI,qBAAU,WACFd,EAAKsB,OAAS,IACdnB,EAAcH,GACdO,GAAa,MAElB,CAACP,IAEJc,qBAAU,WAQNX,EAAcH,EAAKiC,QAPF,SAAAC,GACb,IAAMC,EAAqB/B,EAAWuB,cAChCS,EAAsBF,EAAIG,YAAYV,cAAcW,SAASH,GAC7DI,EAAeL,EAAIA,IAAIP,cAAcW,SAASH,GACpD,OAAOC,GAAuBG,QAInC,CAACnC,EAAYJ,IAEhB,IAAMwC,EAAmB,SAAAC,GACrBA,EAAMC,iBACN,IAAMC,EAAWF,EAAMG,OAAOC,UAC1BF,IAAanC,IACbD,GAAa,GACbE,EAAoBkC,KA6BtBG,EAAc,kBAAM1C,EAAWkB,OAAS,GACxCyB,EAAQ,SAAAC,GAAG,OAAIA,EAAIpB,QAAQ,OAAO,SAAAqB,GAAC,OAAIA,EAAEC,kBAIzCC,EAAa,SAACjB,EAAKkB,GACrB,OACI,wBAAIC,IAAKD,EAAOE,UAAS,iEACrB,yBAAKA,UAAS,mBACV,wBAAIA,UAAU,wBAAwBpB,EAAIA,KAC1C,2BAAOqB,MAAO,CAAEC,MAAO,uBAAvB,IAAiDtB,EAAIuB,SAAS7B,QAAQ,IAAK,IAAID,eAAsB,6BACrG,wBAAI4B,MAAO,CAAEG,aAAc,OAASJ,UAAU,gDAC1C,wBAAIA,UAAU,QAAO,wCAAa,0BAAMA,UAAU,aAAapB,EAAIyB,KAAKrC,OAAS,EAAI,OAASyB,EAAMb,EAAIyB,SACxG,wBAAIL,UAAU,QAAO,0CAXvBM,EAWgDC,KAAKC,UAAU5B,EAAI6B,OAX3D,0BAAMT,UAAS,eAAmB,SAATM,EAAkB,UAAY,WAAsB,SAATA,EAAkB,YAAc,oBAY1G,wBAAIN,UAAU,QAAO,wCAX5B,SAAAM,GAAI,OAAI,0BAAMN,UAAS,eAAmB,OAATM,EAAgB,SAAoB,YAATA,EAAqB,UAAY,YAAcb,EAAMa,IAWvEI,CAAK9B,EAAI8B,SAC3C,6BACL,uBAAGV,UAAU,OAAM,+BAAQpB,EAAIG,cAC/B,uBAAGiB,UAAU,iEAAiEW,KAAM/B,EAAIgC,KAAMC,IAAI,sBAAsBvB,OAAO,UAAS,+CAftI,IAAAgB,GAqBlB,OACI,oCACI,yBAAKN,UAAU,iCACX,kBAACc,EAAA,EAAD,CAAKd,UAAU,mCACX,wBAAIA,UAAU,yCACV,4BACI,uBAAGA,UAAU,8BAAb,oIAA4J,6BAA5J,kFAAiP,0BAAMe,KAAK,MAAMC,aAAW,UAA5B,kBAErP,4BACI,wBAAIhB,UAAU,gBAAd,0BAAoD,0BAAMgB,aAAW,YAAYD,KAAK,OAAlC,oBAIhE,kBAACD,EAAA,EAAD,CAAKd,UAAU,uBACX,yBAAKC,MAAO,CAAEgB,eAAgB,QAASC,SAAU,UAAYlB,UAAU,0BACnE,kBAACmB,EAAA,EAAD,CAAenB,UAAU,oCACrB,uBAAGA,UAAU,+BAAb,uBACCoB,OAAO5C,QAAQpB,GAAYiE,KAAI,SAACC,EAAKC,GAAN,OAC5B,kBAACC,EAAA,EAAD,CAAQzB,IAAKwB,EAAKvB,UAAS,4CAAuC9C,IAAqBoE,EAAI,GAAK,OAAS,SAAWG,QAASvC,GAAmBoC,EAAI,QAG5J,wBAAItB,UAAU,8BACV,4BACI,2BAAO0B,IAAKpE,EAAgBqE,SAvE7B,SAAAxC,GACvBA,EAAMC,iBACNrC,EAAcoC,EAAMG,OAAOZ,QAqEuDuB,MAAO/D,kBAAiB0F,YAAY,yDAAyD5B,UAAU,gCAErK,4BACI,uBAAGA,UAAU,gBAAb,SAAmCR,IAAgB5C,EAAaoB,OAAStB,EAAKsB,OAA9E,aAAgGd,EAAkBsC,IAAW,0BAAwB1C,EAAxB,KAAwC,qCAArK,QAIXE,EAtET,yBAAKiD,MAAOpE,oBAAmBmE,UAAU,yCACrC,wBAAIA,UAAU,uBACV,wBAAIA,UAAU,6BACV,wBAAIA,UAAU,qCAAd,eAEJ,wBAAIA,UAAU,wBACV,kBAAC6B,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,UAClC,kBAACF,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,cAClC,kBAACF,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,SAClC,kBAACF,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,cAClC,kBAACF,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,aA4DT,wBAAI/B,UAAU,uBACtCR,IAAgB5C,EAAayE,IAAIxB,GAAcnD,EAAK2E,IAAIxB,MAIrE,4BAAQG,UAAU,uBACd,uBAAGA,UAAU,mCAAb,0BAC2B,uBAAGA,UAAU,8CAA8CW,KAAK,4CAA4CE,IAAI,sBAAsBvB,OAAO,UAA7I,sBACvB,6BACJ,uBAAGU,UAAU,uDACT,4DAAmC,8BAAM,uBAAGA,UAAU,iBAAiBW,KAAK,+CAA+CE,IAAI,sBAAsBvB,OAAO,UAAnH,4B,gBClKvD0C,EAAS,SAAAC,GACX,OACI,kBAACC,EAAA,EAAD,CAAQlC,UAAU,4BAA4BmC,OAAO,MACjD,wBAAInC,UAAU,uBAAuBW,KAAK,KAA1C,gBACA,kBAACuB,EAAA,EAAOE,OAAR,CAAeC,gBAAc,eAC7B,kBAACH,EAAA,EAAOI,SAAR,CAAiBC,GAAG,2BAChB,kBAACC,EAAA,EAAD,CAAKxC,UAAU,6BACX,kBAAC,IAAD,CAAMA,UAAU,2DAA2DyC,GAAG,gBAA9E,iBAGJ,kBAACD,EAAA,EAAD,CAAKxC,UAAU,wBACX,kBAAC,IAAD,CAAMA,UAAU,wDAAwDyC,GAAG,oBAA3E,mBACA,kBAAC,IAAD,CAAMzC,UAAU,wDAAwDyC,GAAG,oBAA3E,sBAQdC,EAAa,SAAAT,GACf,OACI,yBAAKhC,MAAO,CAAEnE,OAAQ,wBAA0BkE,UAAU,sEACtD,wBAAIA,UAAU,uBACV,4BACI,wBAAIA,UAAU,8BAAd,IAA4D,QAAfiC,EAAMU,KAAiB,kBAAoB,iBAAxF,yBAEJ,4BACI,uBAAG3C,UAAU,gBAAb,gCACA,uBAAGA,UAAU,WAAb,8CAAkE,0BAAMgB,aAAW,cAAcD,KAAK,OAApC,gBAAmD,0BAAMC,aAAW,cAAcD,KAAK,OAApC,qBCZ1H6B,G,YAbH,WACV,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAM6C,KAAK,MACX,kBAAC,EAAD,CAAMA,KAAK,iBACX,kBAAC,EAAD,CAAYA,KAAK,2BCJLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9F,MAAK,SAAA+F,GACJA,EAAaC,gBAEd1F,OAAM,SAAA2F,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b57746c9.chunk.js","sourcesContent":["\nconst StyledLoadingView = {\n    height: '250px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n}\n\nconst StyledSearchBar = {\n    borderStyle: 'none',\n    backgroundColor: 'white',\n    textAlign: 'center',\n    display: 'inline-block',\n    width: '62.5vw',\n    boxShadow: '0px 0px 50px -6px rgba(0, 0, 0, 0.075)',\n}\n\nmodule.exports = { StyledLoadingView, StyledSearchBar };","import React, { useState, useEffect, useRef } from 'react';\nimport { Row, Spinner, Button, ButtonToolbar } from 'react-bootstrap';\nimport { StyledLoadingView, StyledSearchBar } from '../StyleSheet';\nimport axios from 'axios';\n\nconst Main = () => {\n    const [APIs, setAPIs] = useState([]);\n    const [filteredAPIs, setFilterAPIs] = useState([]);\n    const [searchText, setSearchText] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [selectedCategory, setSelectedCategory] = useState('Animals');\n    const [categories, setCategories] = useState({});\n    const searchInputRef = useRef();\n\n    useEffect(() => {\n        axios.get('https://api.publicapis.org/categories')\n            .then(res => {\n                const data = res.data;\n                let fetchedCategories = {};\n\n                for (var i = 0; i < data.length; i++) {\n                    const category = data[i];\n                    fetchedCategories[category] = 0;\n                }\n\n                setCategories(fetchedCategories);\n                setSelectedCategory('Animals');\n            })\n            .catch(err => { /* TODO */ });\n    }, []);\n\n    useEffect(() => {\n        if (categories.hasOwnProperty(selectedCategory)) {\n            var data = categories[selectedCategory];\n            if (data.length > 0) {\n                setAPIs(categories[selectedCategory]);\n            } else {\n                const param = selectedCategory.toLowerCase().replace(' ', '+').replace('&', '%26');\n                axios.get(`https://api.publicapis.org/entries?category=${param}`)\n                    .then(res => {\n                        const fetchedAPIs = res.data.entries;\n                        setAPIs(fetchedAPIs);\n                        setCategories({ ...categories, [selectedCategory]: fetchedAPIs });\n                    })\n                    .catch(err => { /* TODO */ });\n            }\n\n            setSearchText('');\n            searchInputRef.current.value = '';\n        }\n    }, [selectedCategory, categories]);\n\n    useEffect(() => {\n        if (APIs.length > 0) {\n            setFilterAPIs(APIs);\n            setIsLoading(false);\n        }\n    }, [APIs]);\n\n    useEffect(() => {\n        const filtered = API => {\n            const comparedSearchText = searchText.toLowerCase();\n            const descriptionContains = API.Description.toLowerCase().includes(comparedSearchText);\n            const nameContains = API.API.toLowerCase().includes(comparedSearchText);\n            return descriptionContains || nameContains;\n        }\n\n        setFilterAPIs(APIs.filter(filtered));\n    }, [searchText, APIs]);\n\n    const categoryOnSelect = event => {\n        event.preventDefault();\n        const selected = event.target.innerText;\n        if (selected !== selectedCategory) {\n            setIsLoading(true);\n            setSelectedCategory(selected);\n        }\n    }\n\n    const searchTextOnChange = event => {\n        event.preventDefault();\n        setSearchText(event.target.value);\n    }\n\n    // Views\n    const LoadingView = () => {\n        return (\n            <div style={StyledLoadingView} className=\"text-center mx-auto w-100 fade-in-fwd\">\n                <ul className=\"list-inline m-0 p-0\">\n                    <li className=\"m-0 p-0 my-3 align-middle\">\n                        <h4 className=\"m-0 d-inline-block text-secondary\">Loading...</h4>\n                    </li>\n                    <li className=\"m-0 p-0 align-middle\">\n                        <Spinner animation=\"grow\" variant=\"light\" />\n                        <Spinner animation=\"grow\" variant=\"secondary\" />\n                        <Spinner animation=\"grow\" variant=\"dark\" />\n                        <Spinner animation=\"grow\" variant=\"secondary\" />\n                        <Spinner animation=\"grow\" variant=\"light\" />\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n\n    const isSearching = () => searchText.length > 0;\n    const upper = str => str.replace(/^\\w/, c => c.toUpperCase());\n    const TrueFalse = text => <span className={`text-${text === 'true' ? 'success' : 'danger'}`}>{text === 'true' ? 'Supported' : 'Not Supported'}</span>;\n    const Cors = text => <span className={`text-${text === 'no' ? 'danger' : text === 'unknown' ? 'warning' : 'success'}`}>{upper(text)}</span>;\n\n    const APIPreview = (API, index) => {\n        return (\n            <li key={index} className={`list-inline-item d-inline-block m-0 p-0 fade-in-fwd align-top`}>\n                <div className={`p-5 m-2 API-box`}>\n                    <h2 className=\"m-0 font-weight-bold\">{API.API}</h2>\n                    <small style={{ color: 'rgb(155, 155, 155)' }}>#{API.Category.replace(' ', '').toLowerCase()}</small><br />\n                    <ul style={{ borderRadius: '8px' }} className=\"list-inline d-inline-block bg-light p-3 my-4\">\n                        <li className=\"code\"><small>Auth: <span className=\"text-info\">{API.Auth.length < 1 ? 'None' : upper(API.Auth)}</span></small></li>\n                        <li className=\"code\"><small>HTTPS: {TrueFalse(JSON.stringify(API.HTTPS))}</small></li>\n                        <li className=\"code\"><small>Cors: {Cors(API.Cors)}</small></li>\n                    </ul><br />\n                    <p className=\"m-0\"><small>{API.Description}</small></p>\n                    <a className=\"btn btn-sm m-0 btn-light px-3 mt-2 text-secondary rounded-pill\" href={API.Link} rel=\"noopener noreferrer\" target=\"_blank\"><small>Read Docs</small></a>\n                </div>\n            </li>\n        );\n    }\n\n    return (\n        <>\n            <div className=\"container-fluid m-0 px-5 pb-5\">\n                <Row className=\"p-0 m-5 text-center fade-in-top\">\n                    <ul className=\"list-inline m-0 p-0 w-100 text-center\">\n                        <li>\n                            <p className=\"p-0 mx-auto text-secondary\">Okay! So you're looking for an API to provide data for your applications, but you’re stuck. That’s why we’re here.<br />The API Guy will help you to find the perfect API that you want for your apps. <span role=\"img\" aria-label=\"smiley\">🤪</span></p>\n                        </li>\n                        <li>\n                            <h2 className=\"mb-0 mx-auto\">Let's get to scraping! <span aria-label=\"Cool Guy!\" role=\"img\">😎</span></h2>\n                        </li>\n                    </ul>\n                </Row>\n                <Row className=\"m-0 p-0 text-center\">\n                    <div style={{ animationDelay: '0.25s', overflow: 'hidden' }} className=\"w-100 mb-5 fade-in-top\">\n                        <ButtonToolbar className=\"d-inline-block mx-auto mt-4 px-4\">\n                            <p className=\"d-inline-block p-0 m-0 mr-2\">Select a category: </p>\n                            {Object.entries(categories).map((obj, idx) => (\n                                <Button key={idx} className={`m-1 px-3 rounded-pill fade-in btn-${selectedCategory === obj[0] ? 'dark' : 'light'}`} onClick={categoryOnSelect}>{obj[0]}</Button>\n                            ))}\n                        </ButtonToolbar>\n                        <ul className=\"list-inline p-0 mt-5 w-100\">\n                            <li>\n                                <input ref={searchInputRef} onChange={searchTextOnChange} style={StyledSearchBar} placeholder=\"Search for APIs by names, cagories, descriptions, etc.\" className=\"p-3 rounded-pill tb-shadow\" />\n                            </li>\n                            <li>\n                                <p className=\"p-0 m-0 mt-3\">Found {isSearching() ? filteredAPIs.length : APIs.length} APIs for {selectedCategory}{isSearching() ? `, with keyword '${searchText}'` : <></>}.</p>\n                            </li>\n                        </ul>\n                    </div>\n                    {isLoading ? LoadingView() : <ul className=\"list-inline m-0 p-0\">\n                        {isSearching() ? filteredAPIs.map(APIPreview) : APIs.map(APIPreview)}\n                    </ul>}\n                </Row>\n            </div>\n            <footer className=\"p-4 m-0 text-center\">\n                <p className=\"d-inline-block p-0 mb-2 mx-auto\">\n                    Showing API data from: <a className=\"btn btn-sm btn-light px-3 rounded-pill ml-2\" href=\"https://github.com/davemachado/public-api\" rel=\"noopener noreferrer\" target=\"_blank\">&#916; Public API</a>\n                </p><br />\n                <p className=\"text-secondary d-inline-block font-weight-light p-0\">\n                    <small> &copy; 2020 Quang Nguyen - <span><a className=\"text-secondary\" href=\"https://github.com/quangnguyen17/the-api-guy\" rel=\"noopener noreferrer\" target=\"_blank\">View Project Repo!</a></span></small>\n                </p>\n            </footer>\n        </>\n    );\n}\n\nexport default Main;","import React from 'react';\nimport { Link } from \"@reach/router\";\nimport { Navbar, Nav } from 'react-bootstrap';\n\n// NavBar\nconst NavBar = props => {\n    return (\n        <Navbar className=\"px-5 py-4 m-4 fade-in-top\" expand=\"md\">\n            <h1 className=\"m-0 p-0 align-middle\" href=\"#\">The API Guy.</h1>\n            <Navbar.Toggle aria-controls=\"navbar-nav\" />\n            <Navbar.Collapse id=\"navbar-nav align-middle\">\n                <Nav className=\"mr-auto ml-5 align-middle\">\n                    <Link className=\"align-middle text-secondary text-decoration-none my-auto\" to=\"/get-started\">Get Started!</Link>\n\n                </Nav>\n                <Nav className=\"ml-auto align-middle\">\n                    <Link className=\"align-middle text-secondary text-decoration-none mx-3\" to=\"/coming-soon/API\">What is an API?</Link>\n                    <Link className=\"align-middle text-secondary text-decoration-none mx-3\" to=\"/coming-soon/USE\">How to use it?</Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\n// ComingSoon\nconst ComingSoon = props => {\n    return (\n        <div style={{ height: 'calc(87.5vh - 144px)' }} className=\"fade-in text-secondary w-100 d-flex align-items-center text-center\">\n            <ul className=\"list-inline mx-auto\">\n                <li>\n                    <h3 className=\"w-100 d-block mx-auto mb-3\">'{props.page === 'API' ? 'What is an API?' : 'How to use it?'}' page comming soon.</h3>\n                </li>\n                <li>\n                    <p className=\"mb-0 mx-auto\">Check back in with us later.</p>\n                    <p className=\"mx-auto\">In the meantime, be cool and keep coding!  <span aria-label=\"cooley-face\" role=\"img\">😉</span><span aria-label=\"cooley-face\" role=\"img\">🤪</span></p>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\n// Export Components\nexport { NavBar, ComingSoon };\n","import React from 'react';\nimport { Router } from '@reach/router';\n// Components\nimport Main from './components/Main';\nimport { NavBar, ComingSoon } from './components/Components';\n// CSS, Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Router>\n        <Main path=\"/\" />\n        <Main path=\"/get-started\" />\n        <ComingSoon path=\"/coming-soon/:page\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}